{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":53376,"databundleVersionId":5988351,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Import Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom category_encoders import TargetEncoder, OneHotEncoder, OrdinalEncoder\nfrom sklearn.pipeline import make_pipeline\nimport xgboost as xgb\nfrom xgboost import XGBClassifier, DMatrix\nfrom sklearn.ensemble import RandomForestClassifier\nimport optuna\nimport catboost\nimport lightgbm\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import VotingClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-24T19:49:44.146764Z","iopub.execute_input":"2024-05-24T19:49:44.147125Z","iopub.status.idle":"2024-05-24T19:49:51.822188Z","shell.execute_reply.started":"2024-05-24T19:49:44.147094Z","shell.execute_reply":"2024-05-24T19:49:51.821359Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"train_df = pd.read_csv('/kaggle/input/playground-series-s3e17/train.csv')\nprint(f\"-----------Train:----------- \\n {train_df} \\n\")\n\ntest_df = pd.read_csv('/kaggle/input/playground-series-s3e17/test.csv')\nprint(f\"-----------Test:------------ \\n {test_df} \\n\")\n\nss = pd.read_csv('/kaggle/input/playground-series-s3e17/sample_submission.csv')\nprint(f\"-----------Sample Submission:----------- \\n {ss}\")","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:51.823777Z","iopub.execute_input":"2024-05-24T19:49:51.824143Z","iopub.status.idle":"2024-05-24T19:49:52.350593Z","shell.execute_reply.started":"2024-05-24T19:49:51.824117Z","shell.execute_reply":"2024-05-24T19:49:52.349645Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"-----------Train:----------- \n             id Product ID Type  Air temperature [K]  Process temperature [K]  \\\n0            0     L50096    L                300.6                    309.6   \n1            1     M20343    M                302.6                    312.1   \n2            2     L49454    L                299.3                    308.5   \n3            3     L53355    L                301.0                    310.9   \n4            4     M24050    M                298.0                    309.0   \n...        ...        ...  ...                  ...                      ...   \n136424  136424     M22284    M                300.1                    311.4   \n136425  136425     H38017    H                297.5                    308.5   \n136426  136426     L54690    L                300.5                    311.8   \n136427  136427     L53876    L                301.7                    310.9   \n136428  136428     L47937    L                296.9                    308.1   \n\n        Rotational speed [rpm]  Torque [Nm]  Tool wear [min]  Machine failure  \\\n0                         1596         36.1              140                0   \n1                         1759         29.1              200                0   \n2                         1805         26.5               25                0   \n3                         1524         44.3              197                0   \n4                         1641         35.4               34                0   \n...                        ...          ...              ...              ...   \n136424                    1530         37.5              210                0   \n136425                    1447         49.1                2                0   \n136426                    1524         38.5              214                0   \n136427                    1447         46.3               42                0   \n136428                    1557         39.3              229                0   \n\n        TWF  HDF  PWF  OSF  RNF  \n0         0    0    0    0    0  \n1         0    0    0    0    0  \n2         0    0    0    0    0  \n3         0    0    0    0    0  \n4         0    0    0    0    0  \n...     ...  ...  ...  ...  ...  \n136424    0    0    0    0    0  \n136425    0    0    0    0    0  \n136426    0    0    0    0    0  \n136427    0    0    0    0    0  \n136428    0    0    0    0    0  \n\n[136429 rows x 14 columns] \n\n-----------Test:------------ \n            id Product ID Type  Air temperature [K]  Process temperature [K]  \\\n0      136429     L50896    L                302.3                    311.5   \n1      136430     L53866    L                301.7                    311.0   \n2      136431     L50498    L                301.3                    310.4   \n3      136432     M21232    M                300.1                    309.6   \n4      136433     M19751    M                303.4                    312.3   \n...       ...        ...  ...                  ...                      ...   \n90949  227378     L51130    L                302.3                    311.4   \n90950  227379     L47783    L                297.9                    309.8   \n90951  227380     L48097    L                295.6                    306.2   \n90952  227381     L48969    L                298.1                    307.8   \n90953  227382     L52525    L                303.5                    312.8   \n\n       Rotational speed [rpm]  Torque [Nm]  Tool wear [min]  TWF  HDF  PWF  \\\n0                        1499         38.0               60    0    0    0   \n1                        1713         28.8               17    0    0    0   \n2                        1525         37.7               96    0    0    0   \n3                        1479         47.6                5    0    0    0   \n4                        1515         41.3              114    0    0    0   \n...                       ...          ...              ...  ...  ...  ...   \n90949                    1484         40.4               15    0    0    0   \n90950                    1542         33.8               31    0    0    0   \n90951                    1501         41.4              187    0    0    0   \n90952                    1534         40.3               69    0    0    0   \n90953                    1534         36.1               92    0    0    0   \n\n       OSF  RNF  \n0        0    0  \n1        0    0  \n2        0    0  \n3        0    0  \n4        0    0  \n...    ...  ...  \n90949    0    0  \n90950    0    0  \n90951    0    0  \n90952    0    0  \n90953    0    0  \n\n[90954 rows x 13 columns] \n\n-----------Sample Submission:----------- \n            id  Machine failure\n0      136429              0.5\n1      136430              0.5\n2      136431              0.5\n3      136432              0.5\n4      136433              0.5\n...       ...              ...\n90949  227378              0.5\n90950  227379              0.5\n90951  227380              0.5\n90952  227381              0.5\n90953  227382              0.5\n\n[90954 rows x 2 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df.columns","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.351823Z","iopub.execute_input":"2024-05-24T19:49:52.352476Z","iopub.status.idle":"2024-05-24T19:49:52.359404Z","shell.execute_reply.started":"2024-05-24T19:49:52.352442Z","shell.execute_reply":"2024-05-24T19:49:52.358515Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"Index(['id', 'Product ID', 'Type', 'Air temperature [K]',\n       'Process temperature [K]', 'Rotational speed [rpm]', 'Torque [Nm]',\n       'Tool wear [min]', 'Machine failure', 'TWF', 'HDF', 'PWF', 'OSF',\n       'RNF'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"train_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.360625Z","iopub.execute_input":"2024-05-24T19:49:52.361046Z","iopub.status.idle":"2024-05-24T19:49:52.387622Z","shell.execute_reply.started":"2024-05-24T19:49:52.361015Z","shell.execute_reply":"2024-05-24T19:49:52.386402Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   id Product ID Type  Air temperature [K]  Process temperature [K]  \\\n0   0     L50096    L                300.6                    309.6   \n1   1     M20343    M                302.6                    312.1   \n2   2     L49454    L                299.3                    308.5   \n3   3     L53355    L                301.0                    310.9   \n4   4     M24050    M                298.0                    309.0   \n\n   Rotational speed [rpm]  Torque [Nm]  Tool wear [min]  Machine failure  TWF  \\\n0                    1596         36.1              140                0    0   \n1                    1759         29.1              200                0    0   \n2                    1805         26.5               25                0    0   \n3                    1524         44.3              197                0    0   \n4                    1641         35.4               34                0    0   \n\n   HDF  PWF  OSF  RNF  \n0    0    0    0    0  \n1    0    0    0    0  \n2    0    0    0    0  \n3    0    0    0    0  \n4    0    0    0    0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Product ID</th>\n      <th>Type</th>\n      <th>Air temperature [K]</th>\n      <th>Process temperature [K]</th>\n      <th>Rotational speed [rpm]</th>\n      <th>Torque [Nm]</th>\n      <th>Tool wear [min]</th>\n      <th>Machine failure</th>\n      <th>TWF</th>\n      <th>HDF</th>\n      <th>PWF</th>\n      <th>OSF</th>\n      <th>RNF</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>L50096</td>\n      <td>L</td>\n      <td>300.6</td>\n      <td>309.6</td>\n      <td>1596</td>\n      <td>36.1</td>\n      <td>140</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>M20343</td>\n      <td>M</td>\n      <td>302.6</td>\n      <td>312.1</td>\n      <td>1759</td>\n      <td>29.1</td>\n      <td>200</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>L49454</td>\n      <td>L</td>\n      <td>299.3</td>\n      <td>308.5</td>\n      <td>1805</td>\n      <td>26.5</td>\n      <td>25</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>L53355</td>\n      <td>L</td>\n      <td>301.0</td>\n      <td>310.9</td>\n      <td>1524</td>\n      <td>44.3</td>\n      <td>197</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>M24050</td>\n      <td>M</td>\n      <td>298.0</td>\n      <td>309.0</td>\n      <td>1641</td>\n      <td>35.4</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# train_df.describe()\ndef basic_analysis(df):\n    desc = pd.DataFrame()\n    desc['nunqiue'] = df.nunique()\n    desc['perc_nunique'] = np.round(df.nunique()/df.shape[0] * 100, 2)\n    # Count infinite values in each column\n    desc['is_infinity'] = df.apply(lambda col: col.isin([float('inf'), float('-inf')]).sum(), axis=0) # columns wise sum\n\n    desc = pd.concat([desc, train_df.describe().T], axis=1)\n    return desc","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.390668Z","iopub.execute_input":"2024-05-24T19:49:52.390966Z","iopub.status.idle":"2024-05-24T19:49:52.397073Z","shell.execute_reply.started":"2024-05-24T19:49:52.390939Z","shell.execute_reply":"2024-05-24T19:49:52.396149Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"print(f\"Train Basic Analysis: \\n {basic_analysis(train_df)} \\n\")\nprint(f\"Test Basic Analysis: \\n{basic_analysis(test_df)}\")","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.398178Z","iopub.execute_input":"2024-05-24T19:49:52.398497Z","iopub.status.idle":"2024-05-24T19:49:52.816213Z","shell.execute_reply.started":"2024-05-24T19:49:52.398465Z","shell.execute_reply":"2024-05-24T19:49:52.815276Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Train Basic Analysis: \n                          nunqiue  perc_nunique  is_infinity     count  \\\nid                        136429        100.00            0  136429.0   \nProduct ID                  9976          7.31            0       NaN   \nType                           3          0.00            0       NaN   \nAir temperature [K]           95          0.07            0  136429.0   \nProcess temperature [K]       81          0.06            0  136429.0   \nRotational speed [rpm]       952          0.70            0  136429.0   \nTorque [Nm]                  611          0.45            0  136429.0   \nTool wear [min]              246          0.18            0  136429.0   \nMachine failure                2          0.00            0  136429.0   \nTWF                            2          0.00            0  136429.0   \nHDF                            2          0.00            0  136429.0   \nPWF                            2          0.00            0  136429.0   \nOSF                            2          0.00            0  136429.0   \nRNF                            2          0.00            0  136429.0   \n\n                                 mean           std     min      25%      50%  \\\nid                       68214.000000  39383.804275     0.0  34107.0  68214.0   \nProduct ID                        NaN           NaN     NaN      NaN      NaN   \nType                              NaN           NaN     NaN      NaN      NaN   \nAir temperature [K]        299.862776      1.862247   295.3    298.3    300.0   \nProcess temperature [K]    309.941070      1.385173   305.8    308.7    310.0   \nRotational speed [rpm]    1520.331110    138.736632  1181.0   1432.0   1493.0   \nTorque [Nm]                 40.348643      8.502229     3.8     34.6     40.4   \nTool wear [min]            104.408901     63.965040     0.0     48.0    106.0   \nMachine failure              0.015744      0.124486     0.0      0.0      0.0   \nTWF                          0.001554      0.039389     0.0      0.0      0.0   \nHDF                          0.005160      0.071649     0.0      0.0      0.0   \nPWF                          0.002397      0.048899     0.0      0.0      0.0   \nOSF                          0.003958      0.062789     0.0      0.0      0.0   \nRNF                          0.002258      0.047461     0.0      0.0      0.0   \n\n                              75%       max  \nid                       102321.0  136428.0  \nProduct ID                    NaN       NaN  \nType                          NaN       NaN  \nAir temperature [K]         301.2     304.4  \nProcess temperature [K]     310.9     313.8  \nRotational speed [rpm]     1580.0    2886.0  \nTorque [Nm]                  46.1      76.6  \nTool wear [min]             159.0     253.0  \nMachine failure               0.0       1.0  \nTWF                           0.0       1.0  \nHDF                           0.0       1.0  \nPWF                           0.0       1.0  \nOSF                           0.0       1.0  \nRNF                           0.0       1.0   \n\nTest Basic Analysis: \n                         nunqiue  perc_nunique  is_infinity     count  \\\nid                       90954.0        100.00          0.0  136429.0   \nProduct ID                9909.0         10.89          0.0       NaN   \nType                         3.0          0.00          0.0       NaN   \nAir temperature [K]         92.0          0.10          0.0  136429.0   \nProcess temperature [K]     84.0          0.09          0.0  136429.0   \nRotational speed [rpm]     946.0          1.04          0.0  136429.0   \nTorque [Nm]                595.0          0.65          0.0  136429.0   \nTool wear [min]            246.0          0.27          0.0  136429.0   \nTWF                          2.0          0.00          0.0  136429.0   \nHDF                          2.0          0.00          0.0  136429.0   \nPWF                          2.0          0.00          0.0  136429.0   \nOSF                          2.0          0.00          0.0  136429.0   \nRNF                          2.0          0.00          0.0  136429.0   \nMachine failure              NaN           NaN          NaN  136429.0   \n\n                                 mean           std     min      25%      50%  \\\nid                       68214.000000  39383.804275     0.0  34107.0  68214.0   \nProduct ID                        NaN           NaN     NaN      NaN      NaN   \nType                              NaN           NaN     NaN      NaN      NaN   \nAir temperature [K]        299.862776      1.862247   295.3    298.3    300.0   \nProcess temperature [K]    309.941070      1.385173   305.8    308.7    310.0   \nRotational speed [rpm]    1520.331110    138.736632  1181.0   1432.0   1493.0   \nTorque [Nm]                 40.348643      8.502229     3.8     34.6     40.4   \nTool wear [min]            104.408901     63.965040     0.0     48.0    106.0   \nTWF                          0.001554      0.039389     0.0      0.0      0.0   \nHDF                          0.005160      0.071649     0.0      0.0      0.0   \nPWF                          0.002397      0.048899     0.0      0.0      0.0   \nOSF                          0.003958      0.062789     0.0      0.0      0.0   \nRNF                          0.002258      0.047461     0.0      0.0      0.0   \nMachine failure              0.015744      0.124486     0.0      0.0      0.0   \n\n                              75%       max  \nid                       102321.0  136428.0  \nProduct ID                    NaN       NaN  \nType                          NaN       NaN  \nAir temperature [K]         301.2     304.4  \nProcess temperature [K]     310.9     313.8  \nRotational speed [rpm]     1580.0    2886.0  \nTorque [Nm]                  46.1      76.6  \nTool wear [min]             159.0     253.0  \nTWF                           0.0       1.0  \nHDF                           0.0       1.0  \nPWF                           0.0       1.0  \nOSF                           0.0       1.0  \nRNF                           0.0       1.0  \nMachine failure               0.0       1.0  \n","output_type":"stream"}]},{"cell_type":"code","source":"## Dataframe ko list mein daalke list of columns aajate h\nlist(train_df)","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.817629Z","iopub.execute_input":"2024-05-24T19:49:52.818029Z","iopub.status.idle":"2024-05-24T19:49:52.824376Z","shell.execute_reply.started":"2024-05-24T19:49:52.817994Z","shell.execute_reply":"2024-05-24T19:49:52.823480Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"['id',\n 'Product ID',\n 'Type',\n 'Air temperature [K]',\n 'Process temperature [K]',\n 'Rotational speed [rpm]',\n 'Torque [Nm]',\n 'Tool wear [min]',\n 'Machine failure',\n 'TWF',\n 'HDF',\n 'PWF',\n 'OSF',\n 'RNF']"},"metadata":{}}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.825661Z","iopub.execute_input":"2024-05-24T19:49:52.825985Z","iopub.status.idle":"2024-05-24T19:49:52.874724Z","shell.execute_reply.started":"2024-05-24T19:49:52.825961Z","shell.execute_reply":"2024-05-24T19:49:52.873713Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 136429 entries, 0 to 136428\nData columns (total 14 columns):\n #   Column                   Non-Null Count   Dtype  \n---  ------                   --------------   -----  \n 0   id                       136429 non-null  int64  \n 1   Product ID               136429 non-null  object \n 2   Type                     136429 non-null  object \n 3   Air temperature [K]      136429 non-null  float64\n 4   Process temperature [K]  136429 non-null  float64\n 5   Rotational speed [rpm]   136429 non-null  int64  \n 6   Torque [Nm]              136429 non-null  float64\n 7   Tool wear [min]          136429 non-null  int64  \n 8   Machine failure          136429 non-null  int64  \n 9   TWF                      136429 non-null  int64  \n 10  HDF                      136429 non-null  int64  \n 11  PWF                      136429 non-null  int64  \n 12  OSF                      136429 non-null  int64  \n 13  RNF                      136429 non-null  int64  \ndtypes: float64(3), int64(9), object(2)\nmemory usage: 14.6+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df.columns","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.875988Z","iopub.execute_input":"2024-05-24T19:49:52.876288Z","iopub.status.idle":"2024-05-24T19:49:52.882600Z","shell.execute_reply.started":"2024-05-24T19:49:52.876263Z","shell.execute_reply":"2024-05-24T19:49:52.881730Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"Index(['id', 'Product ID', 'Type', 'Air temperature [K]',\n       'Process temperature [K]', 'Rotational speed [rpm]', 'Torque [Nm]',\n       'Tool wear [min]', 'Machine failure', 'TWF', 'HDF', 'PWF', 'OSF',\n       'RNF'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"new_columns=[]\nfor i in train_df.columns:\n    new_columns.append(i.split(\"[\")[0].strip())","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.883971Z","iopub.execute_input":"2024-05-24T19:49:52.884335Z","iopub.status.idle":"2024-05-24T19:49:52.893258Z","shell.execute_reply.started":"2024-05-24T19:49:52.884303Z","shell.execute_reply":"2024-05-24T19:49:52.892325Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"train_df.columns = new_columns\ntarget_columns = list(filter(lambda x: x!='Machine failure', new_columns)) # drop Machine Failures\ntest_df.columns = target_columns","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.894443Z","iopub.execute_input":"2024-05-24T19:49:52.894794Z","iopub.status.idle":"2024-05-24T19:49:52.906473Z","shell.execute_reply.started":"2024-05-24T19:49:52.894751Z","shell.execute_reply":"2024-05-24T19:49:52.905499Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"test_df","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.907646Z","iopub.execute_input":"2024-05-24T19:49:52.907992Z","iopub.status.idle":"2024-05-24T19:49:52.941606Z","shell.execute_reply.started":"2024-05-24T19:49:52.907959Z","shell.execute_reply":"2024-05-24T19:49:52.940695Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"           id Product ID Type  Air temperature  Process temperature  \\\n0      136429     L50896    L            302.3                311.5   \n1      136430     L53866    L            301.7                311.0   \n2      136431     L50498    L            301.3                310.4   \n3      136432     M21232    M            300.1                309.6   \n4      136433     M19751    M            303.4                312.3   \n...       ...        ...  ...              ...                  ...   \n90949  227378     L51130    L            302.3                311.4   \n90950  227379     L47783    L            297.9                309.8   \n90951  227380     L48097    L            295.6                306.2   \n90952  227381     L48969    L            298.1                307.8   \n90953  227382     L52525    L            303.5                312.8   \n\n       Rotational speed  Torque  Tool wear  TWF  HDF  PWF  OSF  RNF  \n0                  1499    38.0         60    0    0    0    0    0  \n1                  1713    28.8         17    0    0    0    0    0  \n2                  1525    37.7         96    0    0    0    0    0  \n3                  1479    47.6          5    0    0    0    0    0  \n4                  1515    41.3        114    0    0    0    0    0  \n...                 ...     ...        ...  ...  ...  ...  ...  ...  \n90949              1484    40.4         15    0    0    0    0    0  \n90950              1542    33.8         31    0    0    0    0    0  \n90951              1501    41.4        187    0    0    0    0    0  \n90952              1534    40.3         69    0    0    0    0    0  \n90953              1534    36.1         92    0    0    0    0    0  \n\n[90954 rows x 13 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Product ID</th>\n      <th>Type</th>\n      <th>Air temperature</th>\n      <th>Process temperature</th>\n      <th>Rotational speed</th>\n      <th>Torque</th>\n      <th>Tool wear</th>\n      <th>TWF</th>\n      <th>HDF</th>\n      <th>PWF</th>\n      <th>OSF</th>\n      <th>RNF</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136429</td>\n      <td>L50896</td>\n      <td>L</td>\n      <td>302.3</td>\n      <td>311.5</td>\n      <td>1499</td>\n      <td>38.0</td>\n      <td>60</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>136430</td>\n      <td>L53866</td>\n      <td>L</td>\n      <td>301.7</td>\n      <td>311.0</td>\n      <td>1713</td>\n      <td>28.8</td>\n      <td>17</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>136431</td>\n      <td>L50498</td>\n      <td>L</td>\n      <td>301.3</td>\n      <td>310.4</td>\n      <td>1525</td>\n      <td>37.7</td>\n      <td>96</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>136432</td>\n      <td>M21232</td>\n      <td>M</td>\n      <td>300.1</td>\n      <td>309.6</td>\n      <td>1479</td>\n      <td>47.6</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>136433</td>\n      <td>M19751</td>\n      <td>M</td>\n      <td>303.4</td>\n      <td>312.3</td>\n      <td>1515</td>\n      <td>41.3</td>\n      <td>114</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>90949</th>\n      <td>227378</td>\n      <td>L51130</td>\n      <td>L</td>\n      <td>302.3</td>\n      <td>311.4</td>\n      <td>1484</td>\n      <td>40.4</td>\n      <td>15</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>90950</th>\n      <td>227379</td>\n      <td>L47783</td>\n      <td>L</td>\n      <td>297.9</td>\n      <td>309.8</td>\n      <td>1542</td>\n      <td>33.8</td>\n      <td>31</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>90951</th>\n      <td>227380</td>\n      <td>L48097</td>\n      <td>L</td>\n      <td>295.6</td>\n      <td>306.2</td>\n      <td>1501</td>\n      <td>41.4</td>\n      <td>187</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>90952</th>\n      <td>227381</td>\n      <td>L48969</td>\n      <td>L</td>\n      <td>298.1</td>\n      <td>307.8</td>\n      <td>1534</td>\n      <td>40.3</td>\n      <td>69</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>90953</th>\n      <td>227382</td>\n      <td>L52525</td>\n      <td>L</td>\n      <td>303.5</td>\n      <td>312.8</td>\n      <td>1534</td>\n      <td>36.1</td>\n      <td>92</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>90954 rows × 13 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"### Categricala and Numerical Featutres\ncategorical_feat = train_df.select_dtypes(include=['object'])\nnumerical_feat = train_df.select_dtypes(include=['float', 'int'])","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.942641Z","iopub.execute_input":"2024-05-24T19:49:52.942919Z","iopub.status.idle":"2024-05-24T19:49:52.952289Z","shell.execute_reply.started":"2024-05-24T19:49:52.942878Z","shell.execute_reply":"2024-05-24T19:49:52.951308Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# Since the correlation between Product Id and target variable is really less. Target encoding would not be a good option.\nfrom scipy.stats import spearmanr\n\n# Calculate Spearman's rank correlation coefficient\nspearman_corr, p_value = spearmanr(train_df['Product ID'], train_df['Machine failure'])\n\nprint(\"Spearman's Rank Correlation Coefficient:\", spearman_corr)\nprint(\"P-value:\", p_value)","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:52.955777Z","iopub.execute_input":"2024-05-24T19:49:52.956145Z","iopub.status.idle":"2024-05-24T19:49:54.296651Z","shell.execute_reply.started":"2024-05-24T19:49:52.956120Z","shell.execute_reply":"2024-05-24T19:49:54.295707Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Spearman's Rank Correlation Coefficient: -0.012963931145135155\nP-value: 1.6798788164708942e-06\n","output_type":"stream"}]},{"cell_type":"code","source":"def convert_columns_types(df):\n    df['Product ID'] = df['Product ID'].astype('category')\n    df['Type'] = df['Type'].astype('category')\n    \nconvert_columns_types(train_df)\nconvert_columns_types(test_df)","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:54.297781Z","iopub.execute_input":"2024-05-24T19:49:54.298072Z","iopub.status.idle":"2024-05-24T19:49:54.370790Z","shell.execute_reply.started":"2024-05-24T19:49:54.298046Z","shell.execute_reply":"2024-05-24T19:49:54.369649Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"X = train_df.drop('Machine failure', axis=1)\ny = train_df['Machine failure']\n\nscore_list, oof_list, test_list = pd.DataFrame(), pd.DataFrame(), pd.DataFrame()\nmodels=[]","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:54.371982Z","iopub.execute_input":"2024-05-24T19:49:54.372273Z","iopub.status.idle":"2024-05-24T19:49:54.382241Z","shell.execute_reply.started":"2024-05-24T19:49:54.372247Z","shell.execute_reply":"2024-05-24T19:49:54.381470Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"def cross_val_score(model, X, y, test, cv):\n    val_predictions = np.zeros(len(X))\n    test_predictions = np.zeros(len(test))\n    \n    train_score_list = []\n    val_score_list = []\n    \n    skf = StratifiedKFold(n_splits=cv, shuffle=True, random_state=42)\n\n    for fold, (train_idx, val_idx) in enumerate(skf.split(X, y)):\n        X_train = X.iloc[train_idx].copy()\n        y_train = y.iloc[train_idx].copy()\n        X_val = X.iloc[val_idx].copy()\n        y_val = y.iloc[val_idx].copy()\n        \n        encoder = model.steps[0][1]\n        \n        if len(model.steps) > 1 and isinstance(encoder, (OrdinalEncoder, OneHotEncoder)):\n            categorical_cols = X_train.select_dtypes(include=['object', 'category']).columns\n            enc = model.steps[0][1]\n            \n            X_train_enc = X_train.copy()\n            X_val_enc = X_val.copy()\n            test_enc = test.copy()\n\n            X_train_enc[categorical_cols] = enc.fit_transform(X_train[categorical_cols])\n            X_val_enc[categorical_cols] = enc.transform(X_val[categorical_cols])\n            test_enc[categorical_cols] = enc.transform(test[categorical_cols])\n            \n        else:\n            X_train_enc = X_train.copy()\n            X_val_enc = X_val.copy()\n            test_enc = test.copy()\n        \n        classifier_step_name = model.steps[-1][0]  # Dynamically get the classifier step name\n        classifier = model.steps[-1][1]  # Get the classifier instance\n\n        if isinstance(classifier, (CatBoostClassifier, XGBClassifier, LGBMClassifier)):\n            # Prepare the fit parameters for classifiers that support early stopping\n            if isinstance(classifier, LGBMClassifier):\n                fit_params = {\n                f'{classifier_step_name}__eval_set': [(X_val_enc, y_val)],\n            }\n            else:\n                fit_params = {\n                    f'{classifier_step_name}__eval_set': [(X_val_enc, y_val)],\n                    f'{classifier_step_name}__early_stopping_rounds': 100,\n                    f'{classifier_step_name}__verbose': False,\n                }\n            # Fit the model with early stopping\n            model.fit(X_train_enc, y_train, **fit_params)\n        else:\n            model.fit(X_train_enc, y_train)\n        \n        train_preds = model.predict(X_train_enc)\n        val_preds = model.predict(X_val_enc)\n        \n        val_predictions[val_idx] = val_preds\n        \n        train_score = roc_auc_score(y_train, train_preds)\n        val_score = roc_auc_score(y_val, val_preds)\n        \n        train_score_list.append(train_score)\n        val_score_list.append(val_score)\n        \n        test_predictions += model.predict_proba(test_enc)[:, 1] / cv\n\n    print(f\"Train AUC: {np.mean(train_score_list):.3f} ± {np.std(train_score_list):.3f} || Val AUC: {np.mean(val_score_list):.3f} ± {np.std(val_score_list):.3f}\")\n    \n    return val_score_list, val_predictions, test_predictions","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:54.383605Z","iopub.execute_input":"2024-05-24T19:49:54.384083Z","iopub.status.idle":"2024-05-24T19:49:54.401902Z","shell.execute_reply.started":"2024-05-24T19:49:54.384043Z","shell.execute_reply":"2024-05-24T19:49:54.401015Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"### XGBOOST","metadata":{}},{"cell_type":"code","source":"seed=42","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:54.403044Z","iopub.execute_input":"2024-05-24T19:49:54.404649Z","iopub.status.idle":"2024-05-24T19:49:54.418768Z","shell.execute_reply.started":"2024-05-24T19:49:54.404625Z","shell.execute_reply":"2024-05-24T19:49:54.418080Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"def xgb_objective(trial):\n    params = {\n        'eta': trial.suggest_float('eta', .001, .1, log=True),\n        'max_depth' : trial.suggest_int('max_depth', 2, 20),\n        'subsample' : trial.suggest_float('subsample', .5, 1),\n        'colsample_bytree' : trial.suggest_float('colsample_bytree', .1, 1),\n        'min_child_weight' : trial.suggest_int('min_child_weight', 1, 15),\n        'reg_lambda' : trial.suggest_float('reg_lambda', 0, 1),\n        'reg_alpha' : trial.suggest_float('reg_alpha', 0, 1),\n        'n_estimators' : trial.suggest_int('n_estimators', 100, 1000),\n        'random_state' : seed,\n        'tree_method' : 'hist',\n        'device': 'cuda'\n    }\n    \n    optuna_model_xgb = make_pipeline(XGBClassifier(tree_method = 'hist', enable_categorical=True))\n    optuna_score_xgb, optuna_val_xgb, optuna_test_xgb = cross_val_score(model=optuna_model_xgb, X=X, y=y, test=test_df, cv=5)\n    \n    return np.mean(optuna_score_xgb)\n\nxgb_study = optuna.create_study(direction='maximize')\nxgb_study.optimize(xgb_objective, n_trials=20)\n\nprint(f\" The best trial:{xgb_study.best_trial}, the best params is:{xgb_study.best_params}, the best value is:{xgb_study.best_value}\")\n\nXGB = XGBClassifier(tree_method = 'hist', enable_categorical=True, **xgb_study.best_params)\nXGB = make_pipeline(XGB)\nscore_list['XGB'], oof_list['XGB'], test_list['CGB'] = cross_val_score(XGB, X=X, y=y, test=test_df, cv=5)","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:49:54.419914Z","iopub.execute_input":"2024-05-24T19:49:54.420184Z","iopub.status.idle":"2024-05-24T19:53:24.624417Z","shell.execute_reply.started":"2024-05-24T19:49:54.420161Z","shell.execute_reply":"2024-05-24T19:53:24.623428Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stderr","text":"[I 2024-05-24 19:49:54,429] A new study created in memory with name: no-name-8cd3fc94-751c-4a89-8e73-f791bb71a5db\n[I 2024-05-24 19:50:04,785] Trial 0 finished with value: 0.8846492440106293 and parameters: {'eta': 0.09216943820083773, 'max_depth': 12, 'subsample': 0.8944431617619358, 'colsample_bytree': 0.8834554150810674, 'min_child_weight': 10, 'reg_lambda': 0.9368750056133421, 'reg_alpha': 0.50287983297839, 'n_estimators': 284}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:50:13,916] Trial 1 finished with value: 0.8846492440106293 and parameters: {'eta': 0.06932548215515498, 'max_depth': 16, 'subsample': 0.7311681533570062, 'colsample_bytree': 0.455369337349533, 'min_child_weight': 13, 'reg_lambda': 0.2869652083765163, 'reg_alpha': 0.18470707186440816, 'n_estimators': 529}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:50:22,943] Trial 2 finished with value: 0.8846492440106293 and parameters: {'eta': 0.03151475497151717, 'max_depth': 9, 'subsample': 0.7436126234015141, 'colsample_bytree': 0.5619380275217414, 'min_child_weight': 3, 'reg_lambda': 0.32842736543701845, 'reg_alpha': 0.9844029043981452, 'n_estimators': 638}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:50:32,035] Trial 3 finished with value: 0.8846492440106293 and parameters: {'eta': 0.007507488016291749, 'max_depth': 8, 'subsample': 0.8933690360569235, 'colsample_bytree': 0.9472666470672307, 'min_child_weight': 8, 'reg_lambda': 0.5362115534223436, 'reg_alpha': 0.981428997128133, 'n_estimators': 967}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:50:42,038] Trial 4 finished with value: 0.8846492440106293 and parameters: {'eta': 0.021203517329893912, 'max_depth': 3, 'subsample': 0.7405256093426684, 'colsample_bytree': 0.1761389138954571, 'min_child_weight': 8, 'reg_lambda': 0.38138425213849214, 'reg_alpha': 0.27898175650883095, 'n_estimators': 192}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:50:51,183] Trial 5 finished with value: 0.8846492440106293 and parameters: {'eta': 0.013593078793431036, 'max_depth': 6, 'subsample': 0.5420383295994752, 'colsample_bytree': 0.7547805457702623, 'min_child_weight': 14, 'reg_lambda': 0.28454187522249763, 'reg_alpha': 0.24335268912110286, 'n_estimators': 710}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:51:00,228] Trial 6 finished with value: 0.8846492440106293 and parameters: {'eta': 0.0036252300805130135, 'max_depth': 2, 'subsample': 0.6447920178009343, 'colsample_bytree': 0.6781313921338511, 'min_child_weight': 10, 'reg_lambda': 0.11932449525110866, 'reg_alpha': 0.8637865694633474, 'n_estimators': 462}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:51:10,297] Trial 7 finished with value: 0.8846492440106293 and parameters: {'eta': 0.015091847245502667, 'max_depth': 12, 'subsample': 0.8044397857865172, 'colsample_bytree': 0.5938612055693726, 'min_child_weight': 1, 'reg_lambda': 0.9255661811870538, 'reg_alpha': 0.9639369067197922, 'n_estimators': 735}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:51:19,481] Trial 8 finished with value: 0.8846492440106293 and parameters: {'eta': 0.03744660986208777, 'max_depth': 19, 'subsample': 0.7891277121549887, 'colsample_bytree': 0.7501577453513665, 'min_child_weight': 14, 'reg_lambda': 0.2747793016586486, 'reg_alpha': 0.21908962303672397, 'n_estimators': 674}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:51:28,571] Trial 9 finished with value: 0.8846492440106293 and parameters: {'eta': 0.0037704590869050256, 'max_depth': 13, 'subsample': 0.9319546141113537, 'colsample_bytree': 0.23995839996424068, 'min_child_weight': 6, 'reg_lambda': 0.09627518591843587, 'reg_alpha': 0.9994747368207207, 'n_estimators': 103}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:51:37,648] Trial 10 finished with value: 0.8846492440106293 and parameters: {'eta': 0.09484697570667795, 'max_depth': 15, 'subsample': 0.9444533388105942, 'colsample_bytree': 0.992353317550064, 'min_child_weight': 11, 'reg_lambda': 0.9870230107204379, 'reg_alpha': 0.5768972410396628, 'n_estimators': 343}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:51:47,967] Trial 11 finished with value: 0.8846492440106293 and parameters: {'eta': 0.09998915017689032, 'max_depth': 17, 'subsample': 0.6420174773167064, 'colsample_bytree': 0.37325179306323, 'min_child_weight': 12, 'reg_lambda': 0.6953403484507934, 'reg_alpha': 0.009982134363673012, 'n_estimators': 367}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:51:57,006] Trial 12 finished with value: 0.8846492440106293 and parameters: {'eta': 0.053063972910604856, 'max_depth': 20, 'subsample': 0.997274992242283, 'colsample_bytree': 0.37448806739325796, 'min_child_weight': 15, 'reg_lambda': 0.7229306514735714, 'reg_alpha': 0.5398452275516462, 'n_estimators': 282}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:52:06,080] Trial 13 finished with value: 0.8846492440106293 and parameters: {'eta': 0.0012107822120039182, 'max_depth': 15, 'subsample': 0.8461609506542681, 'colsample_bytree': 0.40917962902031374, 'min_child_weight': 12, 'reg_lambda': 0.54831034035434, 'reg_alpha': 0.6997566064150726, 'n_estimators': 506}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:52:16,227] Trial 14 finished with value: 0.8846492440106293 and parameters: {'eta': 0.06133198120831683, 'max_depth': 10, 'subsample': 0.670170986171208, 'colsample_bytree': 0.8671853056908474, 'min_child_weight': 6, 'reg_lambda': 0.762743197797926, 'reg_alpha': 0.3940988727010605, 'n_estimators': 878}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:52:25,328] Trial 15 finished with value: 0.8846492440106293 and parameters: {'eta': 0.05741750913969126, 'max_depth': 14, 'subsample': 0.5356708784161504, 'colsample_bytree': 0.453153499254158, 'min_child_weight': 10, 'reg_lambda': 0.8549994579982565, 'reg_alpha': 0.02254123091692159, 'n_estimators': 467}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:52:34,465] Trial 16 finished with value: 0.8846492440106293 and parameters: {'eta': 0.027844230759887897, 'max_depth': 17, 'subsample': 0.7061374364732428, 'colsample_bytree': 0.8422695499284721, 'min_child_weight': 13, 'reg_lambda': 0.4777272561997346, 'reg_alpha': 0.3991171037566923, 'n_estimators': 224}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:52:44,591] Trial 17 finished with value: 0.8846492440106293 and parameters: {'eta': 0.008975098765013134, 'max_depth': 11, 'subsample': 0.8348686366931268, 'colsample_bytree': 0.26768940836512783, 'min_child_weight': 9, 'reg_lambda': 0.19577197500097307, 'reg_alpha': 0.6997217036875384, 'n_estimators': 583}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:52:53,725] Trial 18 finished with value: 0.8846492440106293 and parameters: {'eta': 0.05931140055508842, 'max_depth': 17, 'subsample': 0.6097119757369078, 'colsample_bytree': 0.49440235130389554, 'min_child_weight': 6, 'reg_lambda': 0.6277550905609894, 'reg_alpha': 0.39323564018564805, 'n_estimators': 391}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:53:02,747] Trial 19 finished with value: 0.8846492440106293 and parameters: {'eta': 0.09935431798511841, 'max_depth': 7, 'subsample': 0.8685736119807099, 'colsample_bytree': 0.6272840872461255, 'min_child_weight': 15, 'reg_lambda': 0.42441903441794065, 'reg_alpha': 0.14729359114455343, 'n_estimators': 796}. Best is trial 0 with value: 0.8846492440106293.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.897 ± 0.006 || Val AUC: 0.885 ± 0.010\n The best trial:FrozenTrial(number=0, state=TrialState.COMPLETE, values=[0.8846492440106293], datetime_start=datetime.datetime(2024, 5, 24, 19, 49, 54, 430299), datetime_complete=datetime.datetime(2024, 5, 24, 19, 50, 4, 784721), params={'eta': 0.09216943820083773, 'max_depth': 12, 'subsample': 0.8944431617619358, 'colsample_bytree': 0.8834554150810674, 'min_child_weight': 10, 'reg_lambda': 0.9368750056133421, 'reg_alpha': 0.50287983297839, 'n_estimators': 284}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'eta': FloatDistribution(high=0.1, log=True, low=0.001, step=None), 'max_depth': IntDistribution(high=20, log=False, low=2, step=1), 'subsample': FloatDistribution(high=1.0, log=False, low=0.5, step=None), 'colsample_bytree': FloatDistribution(high=1.0, log=False, low=0.1, step=None), 'min_child_weight': IntDistribution(high=15, log=False, low=1, step=1), 'reg_lambda': FloatDistribution(high=1.0, log=False, low=0.0, step=None), 'reg_alpha': FloatDistribution(high=1.0, log=False, low=0.0, step=None), 'n_estimators': IntDistribution(high=1000, log=False, low=100, step=1)}, trial_id=0, value=None), the best params is:{'eta': 0.09216943820083773, 'max_depth': 12, 'subsample': 0.8944431617619358, 'colsample_bytree': 0.8834554150810674, 'min_child_weight': 10, 'reg_lambda': 0.9368750056133421, 'reg_alpha': 0.50287983297839, 'n_estimators': 284}, the best value is:0.8846492440106293\nTrain AUC: 0.884 ± 0.003 || Val AUC: 0.882 ± 0.011\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### CATBOOST","metadata":{}},{"cell_type":"code","source":"def cb_objective(trial):\n    params = {\n        'learning_rate' : trial.suggest_float('learning_rate', .001, .1, log=True),\n        'max_depth' : trial.suggest_int('max_depth', 2, 10),\n        'n_estimators' : trial.suggest_int('n_estimators', 100, 1000),\n        'random_state' : seed,\n        'cat_features' : ['Product ID', 'Type'],\n        'task_type': 'GPU'\n    }\n    \n    optuna_model_cb = make_pipeline(CatBoostClassifier(**params))\n    optuna_score_cb, optuna_val_cb, optuna_test_cb = cross_val_score(optuna_model_cb, X=X, y=y, test=test_df, cv=5)\n    \n    return np.mean(optuna_score_cb)\n\ncb_study = optuna.create_study(direction='maximize')\n\ncb_study.optimize(cb_objective, n_trials=10)\n\nprint(f\"The best trails: {cb_study.best_trial}, best params is: {cb_study.best_params}, best value is: {cb_study.best_value}\")\n\nCBoost = CatBoostClassifier(cat_features= ['Product ID', 'Type'], **cb_study.best_params)\nCBoost = make_pipeline(CBoost)\nscore_list['CBoost'], oof_list['CBoost'], test_list['CBoost'] = cross_val_score(CBoost, X=X, y=y, test=test_df, cv=5)","metadata":{"execution":{"iopub.status.busy":"2024-05-24T19:53:24.625522Z","iopub.execute_input":"2024-05-24T19:53:24.625795Z","iopub.status.idle":"2024-05-24T20:05:15.972412Z","shell.execute_reply.started":"2024-05-24T19:53:24.625772Z","shell.execute_reply":"2024-05-24T20:05:15.971453Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stderr","text":"[I 2024-05-24 19:53:24,631] A new study created in memory with name: no-name-84bce73d-75ab-43e4-8866-d9971902a8f4\n[I 2024-05-24 19:56:38,150] Trial 0 finished with value: 0.8819308490774012 and parameters: {'learning_rate': 0.005812231702755843, 'max_depth': 9, 'n_estimators': 829}. Best is trial 0 with value: 0.8819308490774012.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.885 ± 0.002 || Val AUC: 0.882 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:57:29,232] Trial 1 finished with value: 0.8830643936442906 and parameters: {'learning_rate': 0.09730463582928683, 'max_depth': 9, 'n_estimators': 283}. Best is trial 1 with value: 0.8830643936442906.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.895 ± 0.001 || Val AUC: 0.883 ± 0.012\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:57:59,098] Trial 2 finished with value: 0.8828132182458077 and parameters: {'learning_rate': 0.08462124207688947, 'max_depth': 4, 'n_estimators': 410}. Best is trial 1 with value: 0.8830643936442906.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.892 ± 0.003 || Val AUC: 0.883 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 19:58:56,925] Trial 3 finished with value: 0.883035689745715 and parameters: {'learning_rate': 0.04233257602299746, 'max_depth': 4, 'n_estimators': 841}. Best is trial 1 with value: 0.8830643936442906.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.893 ± 0.004 || Val AUC: 0.883 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:00:02,891] Trial 4 finished with value: 0.8817020143619269 and parameters: {'learning_rate': 0.0014233707646499245, 'max_depth': 5, 'n_estimators': 757}. Best is trial 1 with value: 0.8830643936442906.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.882 ± 0.003 || Val AUC: 0.882 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:00:41,604] Trial 5 finished with value: 0.8823443782653891 and parameters: {'learning_rate': 0.039580470453909826, 'max_depth': 4, 'n_estimators': 499}. Best is trial 1 with value: 0.8830643936442906.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.890 ± 0.002 || Val AUC: 0.882 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:00:55,387] Trial 6 finished with value: 0.8817020143619269 and parameters: {'learning_rate': 0.010051051042162302, 'max_depth': 8, 'n_estimators': 164}. Best is trial 1 with value: 0.8830643936442906.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.882 ± 0.003 || Val AUC: 0.882 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:01:36,995] Trial 7 finished with value: 0.8817020143619269 and parameters: {'learning_rate': 0.0015023252173225988, 'max_depth': 3, 'n_estimators': 695}. Best is trial 1 with value: 0.8830643936442906.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.882 ± 0.003 || Val AUC: 0.882 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:01:50,451] Trial 8 finished with value: 0.8817020143619269 and parameters: {'learning_rate': 0.017598016858094187, 'max_depth': 6, 'n_estimators': 187}. Best is trial 1 with value: 0.8830643936442906.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.882 ± 0.003 || Val AUC: 0.882 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:02:44,650] Trial 9 finished with value: 0.8837365457721031 and parameters: {'learning_rate': 0.045531699915552164, 'max_depth': 4, 'n_estimators': 801}. Best is trial 9 with value: 0.8837365457721031.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.893 ± 0.004 || Val AUC: 0.884 ± 0.011\nThe best trails: FrozenTrial(number=9, state=TrialState.COMPLETE, values=[0.8837365457721031], datetime_start=datetime.datetime(2024, 5, 24, 20, 1, 50, 453457), datetime_complete=datetime.datetime(2024, 5, 24, 20, 2, 44, 649542), params={'learning_rate': 0.045531699915552164, 'max_depth': 4, 'n_estimators': 801}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'learning_rate': FloatDistribution(high=0.1, log=True, low=0.001, step=None), 'max_depth': IntDistribution(high=10, log=False, low=2, step=1), 'n_estimators': IntDistribution(high=1000, log=False, low=100, step=1)}, trial_id=9, value=None), best params is: {'learning_rate': 0.045531699915552164, 'max_depth': 4, 'n_estimators': 801}, best value is: 0.8837365457721031\nTrain AUC: 0.893 ± 0.004 || Val AUC: 0.884 ± 0.011\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### LGBM","metadata":{}},{"cell_type":"code","source":"def lgbm_objective(trial):\n    params = {\n        'learning_rate' : trial.suggest_float('learning_rate', .001, .1, log = True),\n        'max_depth' : trial.suggest_int('max_depth', 2, 20),\n        'n_estimators' : trial.suggest_int('n_estimators', 100, 1000),\n        'random_state' : seed,\n        'categorical_features': ['Product ID', 'Type'],\n        'early_stopping': trial.suggest_int('early_stopping', 10, 100),\n        'verbose': -1\n    }\n    \n    optuna_model_lgbm = make_pipeline(LGBMClassifier(**params))\n    \n    optuna_score_lgbm, optuna_val_lgbm, optuna_test_lgbm = cross_val_score(optuna_model_lgbm, X=X, y=y, test=test_df, cv=5)\n    \n    return np.mean(optuna_score_lgbm)\n\nlgbm_study = optuna.create_study(direction=\"maximize\")\n\nlgbm_study.optimize(lgbm_objective, n_trials=20)\n\nprint(f\"The best trails: {lgbm_study.best_trial}, best params is: {lgbm_study.best_params}, best value is: {lgbm_study.best_value}\")\n\nLGBM = LGBMClassifier(verbosity=-1, **lgbm_study.best_params)\nLGBM = make_pipeline(LGBM)\nscore_list['LGBM'], oof_list['LGBM'], test_list['LGBM'] = cross_val_score(LGBM, X=X, y=y, test=test_df, cv=5)","metadata":{"execution":{"iopub.status.busy":"2024-05-24T20:05:15.973751Z","iopub.execute_input":"2024-05-24T20:05:15.974123Z","iopub.status.idle":"2024-05-24T20:12:41.694775Z","shell.execute_reply.started":"2024-05-24T20:05:15.974089Z","shell.execute_reply":"2024-05-24T20:12:41.693777Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stderr","text":"[I 2024-05-24 20:05:15,980] A new study created in memory with name: no-name-0b33621c-ed3a-45e6-87cc-2edb8edc43b7\n[I 2024-05-24 20:05:27,535] Trial 0 finished with value: 0.8866705080052583 and parameters: {'learning_rate': 0.026462758063005007, 'max_depth': 9, 'n_estimators': 108, 'early_stopping': 76}. Best is trial 0 with value: 0.8866705080052583.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.917 ± 0.004 || Val AUC: 0.887 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:05:58,805] Trial 1 finished with value: 0.5 and parameters: {'learning_rate': 0.0017192888791224912, 'max_depth': 14, 'n_estimators': 301, 'early_stopping': 30}. Best is trial 0 with value: 0.8866705080052583.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.500 ± 0.000 || Val AUC: 0.500 ± 0.000\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:06:31,765] Trial 2 finished with value: 0.5 and parameters: {'learning_rate': 0.0016066859558414412, 'max_depth': 18, 'n_estimators': 318, 'early_stopping': 89}. Best is trial 0 with value: 0.8866705080052583.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.500 ± 0.000 || Val AUC: 0.500 ± 0.000\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:06:47,837] Trial 3 finished with value: 0.5 and parameters: {'learning_rate': 0.0028610013118831592, 'max_depth': 18, 'n_estimators': 153, 'early_stopping': 97}. Best is trial 0 with value: 0.8866705080052583.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.500 ± 0.000 || Val AUC: 0.500 ± 0.000\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:06:57,461] Trial 4 finished with value: 0.5 and parameters: {'learning_rate': 0.004032578787465779, 'max_depth': 7, 'n_estimators': 116, 'early_stopping': 97}. Best is trial 0 with value: 0.8866705080052583.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.500 ± 0.000 || Val AUC: 0.500 ± 0.000\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:09:11,575] Trial 5 finished with value: 0.8864310451111672 and parameters: {'learning_rate': 0.0035607556745309923, 'max_depth': 20, 'n_estimators': 934, 'early_stopping': 51}. Best is trial 0 with value: 0.8866705080052583.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.924 ± 0.003 || Val AUC: 0.886 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:09:23,056] Trial 6 finished with value: 0.8875247150913665 and parameters: {'learning_rate': 0.05494704108823181, 'max_depth': 13, 'n_estimators': 597, 'early_stopping': 82}. Best is trial 6 with value: 0.8875247150913665.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.925 ± 0.008 || Val AUC: 0.888 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:09:34,689] Trial 7 finished with value: 0.5 and parameters: {'learning_rate': 0.0016429153425291851, 'max_depth': 12, 'n_estimators': 102, 'early_stopping': 76}. Best is trial 6 with value: 0.8875247150913665.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.500 ± 0.000 || Val AUC: 0.500 ± 0.000\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:09:52,723] Trial 8 finished with value: 0.8850500473220595 and parameters: {'learning_rate': 0.01576605001966812, 'max_depth': 6, 'n_estimators': 222, 'early_stopping': 33}. Best is trial 6 with value: 0.8875247150913665.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.911 ± 0.003 || Val AUC: 0.885 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:10:23,382] Trial 9 finished with value: 0.8837508970974927 and parameters: {'learning_rate': 0.011224878494050657, 'max_depth': 2, 'n_estimators': 770, 'early_stopping': 58}. Best is trial 6 with value: 0.8875247150913665.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.887 ± 0.003 || Val AUC: 0.884 ± 0.009\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:10:27,822] Trial 10 finished with value: 0.8893527524690773 and parameters: {'learning_rate': 0.09983199719734161, 'max_depth': 14, 'n_estimators': 546, 'early_stopping': 13}. Best is trial 10 with value: 0.8893527524690773.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.927 ± 0.006 || Val AUC: 0.889 ± 0.009\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:10:33,334] Trial 11 finished with value: 0.8886582595196121 and parameters: {'learning_rate': 0.08620097636735426, 'max_depth': 14, 'n_estimators': 562, 'early_stopping': 19}. Best is trial 10 with value: 0.8893527524690773.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.923 ± 0.006 || Val AUC: 0.889 ± 0.008\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:10:38,130] Trial 12 finished with value: 0.887506097832419 and parameters: {'learning_rate': 0.08829845184993484, 'max_depth': 15, 'n_estimators': 513, 'early_stopping': 10}. Best is trial 10 with value: 0.8893527524690773.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.922 ± 0.006 || Val AUC: 0.888 ± 0.009\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:10:42,643] Trial 13 finished with value: 0.8909780200702475 and parameters: {'learning_rate': 0.09964835754618986, 'max_depth': 16, 'n_estimators': 549, 'early_stopping': 10}. Best is trial 13 with value: 0.8909780200702475.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.928 ± 0.004 || Val AUC: 0.891 ± 0.009\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:10:53,429] Trial 14 finished with value: 0.8889849899433895 and parameters: {'learning_rate': 0.0399794813410701, 'max_depth': 17, 'n_estimators': 435, 'early_stopping': 28}. Best is trial 13 with value: 0.8909780200702475.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.925 ± 0.004 || Val AUC: 0.889 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:11:05,984] Trial 15 finished with value: 0.8861904973367253 and parameters: {'learning_rate': 0.030750151181253838, 'max_depth': 10, 'n_estimators': 678, 'early_stopping': 10}. Best is trial 13 with value: 0.8909780200702475.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.928 ± 0.004 || Val AUC: 0.886 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:11:15,420] Trial 16 finished with value: 0.8877976899111568 and parameters: {'learning_rate': 0.05645288536498374, 'max_depth': 16, 'n_estimators': 748, 'early_stopping': 46}. Best is trial 13 with value: 0.8909780200702475.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.923 ± 0.005 || Val AUC: 0.888 ± 0.010\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:11:21,424] Trial 17 finished with value: 0.890044064088047 and parameters: {'learning_rate': 0.09900151691186823, 'max_depth': 20, 'n_estimators': 421, 'early_stopping': 40}. Best is trial 13 with value: 0.8909780200702475.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.926 ± 0.005 || Val AUC: 0.890 ± 0.009\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:11:44,228] Trial 18 finished with value: 0.886655613893083 and parameters: {'learning_rate': 0.017444551906232293, 'max_depth': 20, 'n_estimators': 373, 'early_stopping': 40}. Best is trial 13 with value: 0.8909780200702475.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.924 ± 0.002 || Val AUC: 0.887 ± 0.011\n","output_type":"stream"},{"name":"stderr","text":"[I 2024-05-24 20:12:37,464] Trial 19 finished with value: 0.8869233098230811 and parameters: {'learning_rate': 0.0062097191191429375, 'max_depth': 20, 'n_estimators': 457, 'early_stopping': 62}. Best is trial 13 with value: 0.8909780200702475.\n","output_type":"stream"},{"name":"stdout","text":"Train AUC: 0.915 ± 0.003 || Val AUC: 0.887 ± 0.011\nThe best trails: FrozenTrial(number=13, state=TrialState.COMPLETE, values=[0.8909780200702475], datetime_start=datetime.datetime(2024, 5, 24, 20, 10, 38, 131789), datetime_complete=datetime.datetime(2024, 5, 24, 20, 10, 42, 642803), params={'learning_rate': 0.09964835754618986, 'max_depth': 16, 'n_estimators': 549, 'early_stopping': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'learning_rate': FloatDistribution(high=0.1, log=True, low=0.001, step=None), 'max_depth': IntDistribution(high=20, log=False, low=2, step=1), 'n_estimators': IntDistribution(high=1000, log=False, low=100, step=1), 'early_stopping': IntDistribution(high=100, log=False, low=10, step=1)}, trial_id=13, value=None), best params is: {'learning_rate': 0.09964835754618986, 'max_depth': 16, 'n_estimators': 549, 'early_stopping': 10}, best value is: 0.8909780200702475\nTrain AUC: 0.928 ± 0.004 || Val AUC: 0.891 ± 0.009\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### META MODEL","metadata":{}},{"cell_type":"code","source":"meta_model = LogisticRegression().fit(X=oof_list, y=train_df['Machine failure'])\nweights = meta_model.coef_[0]\n\nweights = meta_model.coef_[0]\n\nweights = weights/np.sum(weights)","metadata":{"execution":{"iopub.status.busy":"2024-05-24T20:12:41.696448Z","iopub.execute_input":"2024-05-24T20:12:41.697103Z","iopub.status.idle":"2024-05-24T20:12:41.987647Z","shell.execute_reply.started":"2024-05-24T20:12:41.697063Z","shell.execute_reply":"2024-05-24T20:12:41.986201Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"# Make the final prediction by applying the weights\nfinal_predictions = np.dot(test_list, weights)\n\nbinary_predictions = (final_predictions >= 0.5).astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-05-24T20:12:41.989378Z","iopub.execute_input":"2024-05-24T20:12:41.990116Z","iopub.status.idle":"2024-05-24T20:12:41.999545Z","shell.execute_reply.started":"2024-05-24T20:12:41.990080Z","shell.execute_reply":"2024-05-24T20:12:41.998284Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"binary_predictions.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-24T20:18:35.531942Z","iopub.execute_input":"2024-05-24T20:18:35.532274Z","iopub.status.idle":"2024-05-24T20:18:35.538328Z","shell.execute_reply.started":"2024-05-24T20:18:35.532250Z","shell.execute_reply":"2024-05-24T20:18:35.537407Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"(90954,)"},"metadata":{}}]},{"cell_type":"code","source":"ss['Machine failure'] = binary_predictions","metadata":{"execution":{"iopub.status.busy":"2024-05-24T20:18:41.031539Z","iopub.execute_input":"2024-05-24T20:18:41.032216Z","iopub.status.idle":"2024-05-24T20:18:41.036724Z","shell.execute_reply.started":"2024-05-24T20:18:41.032186Z","shell.execute_reply":"2024-05-24T20:18:41.035812Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"ss.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-24T20:18:45.840663Z","iopub.execute_input":"2024-05-24T20:18:45.841094Z","iopub.status.idle":"2024-05-24T20:18:45.852339Z","shell.execute_reply.started":"2024-05-24T20:18:45.841059Z","shell.execute_reply":"2024-05-24T20:18:45.850969Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"       id  Machine failure\n0  136429                0\n1  136430                0\n2  136431                0\n3  136432                0\n4  136433                0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Machine failure</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>136429</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>136430</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>136431</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>136432</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>136433</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"ss.to_csv('submission.csv', index = False)","metadata":{"execution":{"iopub.status.busy":"2024-05-24T20:20:48.728434Z","iopub.execute_input":"2024-05-24T20:20:48.729208Z","iopub.status.idle":"2024-05-24T20:20:48.844179Z","shell.execute_reply.started":"2024-05-24T20:20:48.729178Z","shell.execute_reply":"2024-05-24T20:20:48.843186Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}